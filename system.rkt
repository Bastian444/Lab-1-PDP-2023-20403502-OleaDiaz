#lang racket
;; LABORATORIO N°1 PARADIGMAS DE PROGRAMACION (1-2023)
;; (NO SE HACE USO DE TILDES CON LA INTECION DE NO TENER PROBLEMAS TECNICOS)

;; PARADIGMA: FUNCIONAL | LENGUAJE DE PROGRAMACIÓN: SCHEME/RACKET 
;; POR: BASTIAN OLEA DIAZ

;; REQUERIMIENTO FUNCIONAL N°1:
;; TDA'S (TIPOS DE DATO ABSTRACTOS)

;; TDA SYSTEM, TAMBIEN CONSTRUCTOR (REQUERIMIENTO FUNCIONAL N°2)
;; IMPLEMENTACION = DECLARATIVA, USO DE LISTA
;; DOMINIO = NOMBRE DEL SISTEMA
;; RECORRIDO = SYSTEM
;; RECURSION = N/A
;; DESCRIPCION = OBTIENE UN NOMBRE Y DEVUELVE UN SYSTEM
(require (file "datesys.rkt"))

(define system (lambda (name)
                 (if (string? name)
                     (list null name (datesys (current-seconds)) null null null null null) 
                     #f)))

;; FUNCION MAKE-SYSTEM
;; IMPLEMENTACION =  DECLARATIVA, USO DE LISTA
;; DOMINIO = USUARIO ACTIVO, NOMBRE, FECHA DE CREACION, USUARIOS, DRIVES, DRIVE ACTUAL, RUTA ACTUAL, RUTAS
;; RECORRIDO = SYSTEM
;; RECURSION = N/A
;; DESCRIPCION: CREA UN SYSTEM.

(define (make-system current-user name date users drives current-drive current-path paths)
  (list current-user name date users drives current-drive current-path paths))

;; FUNCION GET-SYSTEM-CURRENT-USER
;; IMPLEMENTACION = DECLARATIVA
;; DOMINIO = SYSTEM
;; RECORRIDO = LISTA CON EL STRING DEL USUARIO ACTIVO
;; RECURSION = N/A
;; DESCRIPCION = SE ENTREGA UN SYSTEM Y RETORNA LA LISTA QUE CONTIENE EL STRING DEL USUARIO ACTIVO EN EL
;; MOMENTO.

(define get-system-current-user car)

;; FUNCION GET-SYSTEM-NAME
;; IMPLEMENTACION = DECLARATIVA
;; DOMINIO = SYSTEM
;; RECORRIDO = STRING
;; RECURSION = N/A
;; DESCRIPCION = RECIBE UN SYSTEM Y RETORNA EL STRING EQUIVALENTE AL NOMBRE DEL SYSTEM.

(define get-system-name cadr)

;; FUNCION GET-SYSTEM-DATE
;; IMPLEMENTACION = DECLARATIVA
;; DOMINIO = SYSTEM
;; RECORRIDO = LISTA QUE REPRESENTA EL TIMESTAMP
;; RECURSION = N/A
;; DESCRIPCION = RECIBE UN SYSTEM Y DEVUELVE LA LISTA QUE CONTIENE LA FECHA DE CREACION
;; DEL SYSTEM.

(define get-system-date caddr)

;; FUNCION GET-SYSTEM-USER
;; IMPLEMENTACION = DECLARATIVA
;; DOMINIO = SYSTEM
;; RECORRIDO = LISTA DE USER'S
;; RECURSION = N/A
;; DESCRIPCION = RECIBE UN SYSTEM Y RETORNA UNA LISTA QUE CONTIENE LOS USUARIOS REGISTRADOS
;; EN EL SYSTEM.

(define get-system-user cadddr)

;; FUNCION GET-SYSTEM-DRIVE
;; IMPLEMENTACION = DECLARATIVA 
;; DOMINIO = SYSTEM
;; RECORRIDO = LISTA DE DRIVES
;; RECURSION = N/A
;; DESCRIPCION = RECIBE UN SYSTEM Y RETORNA LA LISTA DE LOS DRIVES EXISTENTES EN EL SYSTEM.
;; A PARTIR DE AQUI SE MANEJA A PARTIR DE UN REVERSE YA QUE LA FUNCION CADDDR DEFINIDA EN
;; SCHEME/RACKET TIENE COMO LIMITE CADDDR Y CADDDDR NO EXISTE.

(define get-system-drive
  (lambda(system)
    (cadddr(reverse system))))

;; FUNCION GET-SYSTEM-CURRENT-DRIVE
;; IMPLEMENTACION = DECLARATIVA
;; DOMINIO = SYSTEM
;; RECORRIDO = LISTA CON LA LETRA DEL DRIVE OCUPADO EN ESE MOMENTO
;; RECURSION = N/A
;; DESCRIPCION = RECIBE UN SYSTEM Y RETORNA LA LISTA CON EL CHAR DEL DRIVE OCUPADO EN EL MOMENTO.

(define get-system-current-drive
  (lambda(system)
    (caddr(reverse system))))

;; FUNCION GET-SYSTEM-CURRENT-PATH
;; IMPLEMENTACION = DECLARATIVA
;; DOMINIO = SYSTEM
;; RECORRIDO = LISTA QUE CONTIENE EL STRING QUE REPRESENTA LA RUTA ACTUAL
;; RECURSION = N/A
;; DESCRIPCION = RECIBE UN SYSTEM Y RETORNA UNA LISTA QUE CONTIENE EL STRING DE LA RUTA ACTUAL.

(define get-system-current-path
  (lambda(system)
    (cadr(reverse system))))

;; FUNCION GET-SYSTEM-PATHS
;; IMPLEMENTACION = DECLARATIVA 
;; DOMINIO = SYSTEM
;; RECORRIDO = LISTA QUE CONTIENE LISTAS DE TODAS LAS RUTAS PRESENTES EN EL SYSTEM
;; RECURSION = N/A
;; DESCRIPCION = RECIBE UN SYSTEM Y RETORNA TODAS LAS RUTAS EXISTENTES EN EL SYSTEM.

(define get-system-paths
  (lambda(system)
    (car(reverse system))))



(provide (all-defined-out))